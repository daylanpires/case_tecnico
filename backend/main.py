"""
Sistema de Autentica√ß√£o e M√©tricas de Marketing Digital

API desenvolvida com FastAPI que oferece:
- Autentica√ß√£o JWT segura com bcrypt
- Consulta de m√©tricas com controle de permiss√µes por role
- Pagina√ß√£o e filtros avan√ßados
- Middleware CORS para integra√ß√£o frontend

Autor: Desenvolvido para processo seletivo
Vers√£o: 1.0.0
"""

import os
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, Union

import bcrypt
import pandas as pd
from fastapi import FastAPI, HTTPException, Depends, Request, Query, status
from fastapi.security import OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from jose import jwt, JWTError

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('api.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === CONFIGURA√á√ïES ===
# Configura√ß√µes JWT - Em produ√ß√£o, usar vari√°veis de ambiente
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "k2v8Qw1n9Zp3s7Xy5Tg6Jr4Lm8Vb2Nc1Qw3Er5Ty7Ui9Op0As")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Limites de seguran√ßa
MAX_PAGE_SIZE = 1000
DEFAULT_PAGE_SIZE = 50

# Caminhos dos arquivos de dados
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
USERS_CSV = os.path.abspath(os.path.join(BASE_DIR, "..", "data", "users.csv"))
METRICS_CSV = os.path.abspath(os.path.join(BASE_DIR, "..", "data", "metrics.csv"))

# === APLICA√á√ÉO FASTAPI ===
app = FastAPI(
    title="Sistema de M√©tricas de Marketing Digital",
    description="""
    API completa para autentica√ß√£o e consulta de m√©tricas de marketing digital.
    
    **Caracter√≠sticas principais:**
    - üîê Autentica√ß√£o JWT com bcrypt
    - üë• Controle de acesso por roles (admin/user)
    - üìä Consulta de m√©tricas com filtros e pagina√ß√£o
    - üöÄ Performance otimizada para grandes volumes de dados
    
    **Usu√°rios de teste:**
    - admin/admin123 (acesso completo)
    - user/user123 (acesso limitado)
    """,
    version="1.0.0",
    contact={
        "name": "Equipe de Desenvolvimento",
        "email": "dev@empresa.com"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
)

# === MIDDLEWARE ===
# Configura√ß√£o CORS - Em produ√ß√£o, especificar origins exatos
app.add_middleware(
    CORSMiddleware,
    allow_origins=os.getenv("CORS_ORIGINS", "*").split(","),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# === FUN√á√ïES UTILIT√ÅRIAS ===

def get_users() -> pd.DataFrame:
    """
    Carrega dados dos usu√°rios do arquivo CSV com tratamento de erro robusto.
    
    Returns:
        pd.DataFrame: DataFrame contendo colunas 'username', 'password' e 'role'
        
    Raises:
        HTTPException: 
            - 500: Se arquivo n√£o for encontrado ou houver erro de leitura
            - 500: Se estrutura do CSV for inv√°lida
            
    Note:
        Em produ√ß√£o, considerar usar banco de dados ao inv√©s de CSV
    """
    try:
        if not os.path.exists(USERS_CSV):
            logger.error(f"Arquivo de usu√°rios n√£o encontrado: {USERS_CSV}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Arquivo de configura√ß√£o de usu√°rios n√£o encontrado"
            )
        
        df = pd.read_csv(USERS_CSV)
        
        # Validar estrutura esperada do CSV
        required_columns = {'username', 'password', 'role'}
        if not required_columns.issubset(df.columns):
            missing = required_columns - set(df.columns)
            logger.error(f"Colunas obrigat√≥rias ausentes no CSV: {missing}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Estrutura de dados de usu√°rios inv√°lida"
            )
        
        logger.info(f"Carregados {len(df)} usu√°rios do arquivo CSV")
        return df
        
    except pd.errors.EmptyDataError:
        logger.error("Arquivo de usu√°rios est√° vazio")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Arquivo de usu√°rios est√° vazio"
        )
    except pd.errors.ParserError as e:
        logger.error(f"Erro ao fazer parse do CSV de usu√°rios: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Formato do arquivo de usu√°rios inv√°lido"
        )
    except Exception as e:
        logger.error(f"Erro inesperado ao ler usu√°rios: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno do servidor"
        )

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    Verifica se a senha em texto plano corresponde ao hash bcrypt armazenado.
    
    Args:
        plain_password: Senha fornecida pelo usu√°rio em texto plano
        hashed_password: Hash bcrypt armazenado no banco/CSV
        
    Returns:
        bool: True se a senha estiver correta, False caso contr√°rio
        
    Note:
        Fun√ß√£o segura contra timing attacks devido ao bcrypt
    """
    if not plain_password or not hashed_password:
        logger.warning("Tentativa de verifica√ß√£o de senha com par√¢metros vazios")
        return False
        
    try:
        return bcrypt.checkpw(
            plain_password.encode('utf-8'), 
            hashed_password.encode('utf-8')
        )
    except (ValueError, TypeError) as e:
        logger.warning(f"Erro na verifica√ß√£o de senha: {e}")
        return False
    except Exception as e:
        logger.error(f"Erro inesperado na verifica√ß√£o de senha: {e}")
        return False

def authenticate_user(username: str, password: str) -> Optional[Dict[str, str]]:
    """
    Autentica um usu√°rio verificando credenciais contra o banco de dados.
    
    Args:
        username: Nome de usu√°rio ou email
        password: Senha em texto plano
        
    Returns:
        dict: Dados do usu√°rio {'email': str, 'role': str} se v√°lido
        None: Se credenciais inv√°lidas
        
    Raises:
        HTTPException: Se houver erro ao acessar dados dos usu√°rios
        
    Security:
        - Usa bcrypt para verifica√ß√£o segura de senhas
        - Log de tentativas de autentica√ß√£o para auditoria
        - N√£o vaza informa√ß√µes sobre exist√™ncia de usu√°rios
    """
    try:
        users_df = get_users()
        
        # Buscar usu√°rio (case-insensitive para email)
        user_match = users_df[users_df['username'].str.lower() == username.lower()]
        
        if user_match.empty:
            logger.warning(f"Tentativa de login com usu√°rio inexistente: {username}")
            return None
        
        user_data = user_match.iloc[0]
        
        # Verificar senha usando bcrypt
        if not verify_password(password, user_data['password']):
            logger.warning(f"Senha incorreta para usu√°rio: {username}")
            return None
        
        # Autentica√ß√£o bem-sucedida
        logger.info(f"Login bem-sucedido para usu√°rio: {username} (role: {user_data['role']})")
        return {
            "email": user_data['username'],
            "role": user_data['role']
        }
        
    except HTTPException:
        # Re-raise HTTPExceptions (j√° tratadas)
        raise
    except Exception as e:
        logger.error(f"Erro inesperado na autentica√ß√£o: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno durante autentica√ß√£o"
        )

def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    """
    Cria um token JWT assinado com os dados do usu√°rio.
    
    Args:
        data: Dados para incluir no payload do token
        expires_delta: Tempo customizado de expira√ß√£o (opcional)
        
    Returns:
        str: Token JWT assinado
        
    Raises:
        Exception: Se houver erro na cria√ß√£o do token
        
    Security:
        - Token expira automaticamente ap√≥s tempo configurado
        - Inclui timestamp de expira√ß√£o no payload
        - Usa algoritmo HS256 para assinatura
    """
    try:
        to_encode = data.copy()
        
        # Calcular tempo de expira√ß√£o
        if expires_delta:
            expire = datetime.now(timezone.utc) + expires_delta
        else:
            expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        
        # Adicionar expira√ß√£o ao payload
        to_encode.update({
            "exp": int(expire.timestamp()),
            "iat": int(datetime.now(timezone.utc).timestamp()),  # Issued at
            "type": "access_token"
        })
        
        # Criar e assinar token
        token = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
        
        logger.info(f"Token criado para usu√°rio: {data.get('email')} (expira em: {expire})")
        return token
        
    except Exception as e:
        logger.error(f"Erro ao criar token JWT: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno ao gerar token de acesso"
        )

async def get_current_user(request: Request) -> Dict[str, Any]:
    """
    Extrai e valida o usu√°rio atual a partir do token JWT no header Authorization.
    
    Args:
        request: Objeto Request HTTP do FastAPI
        
    Returns:
        dict: Dados do usu√°rio decodificados do token
            - email: Email/username do usu√°rio
            - role: Role/papel do usu√°rio (admin, user, etc)
            - exp: Timestamp de expira√ß√£o
            - iat: Timestamp de cria√ß√£o
            
    Raises:
        HTTPException: 
            - 401: Token ausente, formato inv√°lido, expirado ou corrompido
            
    Security:
        - Valida formato do header Authorization
        - Verifica assinatura do token
        - Valida expira√ß√£o automaticamente via jose.jwt
    """
    # Extrair header Authorization
    auth_header = request.headers.get("Authorization")
    
    if not auth_header:
        logger.warning("Tentativa de acesso sem header Authorization")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token de acesso ausente",
            headers={"WWW-Authenticate": "Bearer"}
        )
    
    if not auth_header.startswith("Bearer "):
        logger.warning(f"Formato de Authorization header inv√°lido: {auth_header[:20]}...")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Formato do token inv√°lido. Use: Bearer <token>",
            headers={"WWW-Authenticate": "Bearer"}
        )
    
    # Extrair token
    token = auth_header[7:]  # Remove "Bearer "
    
    try:
        # Decodificar e validar token
        payload = jwt.decode(
            token, 
            SECRET_KEY, 
            algorithms=[ALGORITHM],
            options={"verify_exp": True}  # Validar expira√ß√£o
        )
        
        # Validar campos obrigat√≥rios
        email = payload.get("email")
        role = payload.get("role")
        token_type = payload.get("type")
        
        if not email or not role:
            logger.warning("Token com campos obrigat√≥rios ausentes")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token inv√°lido: dados insuficientes"
            )
        
        if token_type != "access_token":
            logger.warning(f"Tipo de token inv√°lido: {token_type}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Tipo de token inv√°lido"
            )
        
        logger.debug(f"Token validado com sucesso para usu√°rio: {email}")
        return payload
        
    except jwt.ExpiredSignatureError:
        logger.warning("Tentativa de acesso com token expirado")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token expirado. Fa√ßa login novamente",
            headers={"WWW-Authenticate": "Bearer"}
        )
    except jwt.JWTError as e:
        logger.warning(f"Token JWT inv√°lido: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token inv√°lido ou corrompido",
            headers={"WWW-Authenticate": "Bearer"}
        )
    except Exception as e:
        logger.error(f"Erro inesperado na valida√ß√£o do token: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Erro interno na valida√ß√£o do token"
        )

# === ENDPOINTS DA API ===

@app.post("/login", 
          summary="Autentica√ß√£o de usu√°rio",
          description="Endpoint para login que retorna token JWT v√°lido",
          response_description="Token de acesso JWT",
          tags=["Autentica√ß√£o"])
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    """
    **Autenticar usu√°rio e obter token de acesso**
    
    Este endpoint autentica um usu√°rio usando username/password e retorna 
    um token JWT que deve ser usado para acessar endpoints protegidos.
    
    **Processo de autentica√ß√£o:**
    1. Valida credenciais contra base de usu√°rios
    2. Verifica senha usando hash bcrypt seguro  
    3. Gera token JWT com dados do usu√°rio e expira√ß√£o
    4. Retorna token para uso em requisi√ß√µes subsequentes
    
    **Usu√°rios de teste dispon√≠veis:**
    - `admin` / `admin123` ‚Üí Acesso completo (v√™ dados financeiros)
    - `user` / `user123` ‚Üí Acesso limitado (sem dados sens√≠veis)
    
    **Como usar o token:**
    ```
    Authorization: Bearer <seu_token_aqui>
    ```
    
    **Seguran√ßa:**
    - Senhas verificadas com bcrypt (resistente a timing attacks)
    - Tokens expiram automaticamente em 60 minutos
    - Log de tentativas para auditoria
    """
    try:
        # Autenticar usu√°rio
        user = authenticate_user(form_data.username, form_data.password)
        
        if not user:
            # N√£o revelar se √© usu√°rio ou senha inv√°lida por seguran√ßa
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Credenciais inv√°lidas",
                headers={"WWW-Authenticate": "Bearer"}
            )
        
        # Criar token de acesso
        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={
                "email": user["email"], 
                "role": user["role"]
            },
            expires_delta=access_token_expires
        )
        
        logger.info(f"Login bem-sucedido: {user['email']} (role: {user['role']})")
        
        return {
            "access_token": access_token,
            "token_type": "bearer",
            "expires_in": ACCESS_TOKEN_EXPIRE_MINUTES * 60  # em segundos
        }
        
    except HTTPException:
        # Re-raise HTTPExceptions (j√° tratadas)
        raise
    except Exception as e:
        logger.error(f"Erro inesperado no login: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno no processo de autentica√ß√£o"
        )

@app.get("/", 
         summary="Status da API",
         description="Endpoint de verifica√ß√£o de sa√∫de da aplica√ß√£o",
         tags=["Sistema"])
async def root():
    """
    **Verificar status da API**
    
    Endpoint de health check que confirma se a API est√° funcionando
    corretamente e fornece informa√ß√µes b√°sicas da aplica√ß√£o.
    
    **Retorna:**
    - Status operacional da API
    - Vers√£o da aplica√ß√£o
    - Timestamp atual (UTC)
    - Informa√ß√µes de configura√ß√£o b√°sicas
    """
    return {
        "message": "Sistema de M√©tricas de Marketing Digital - API Online",
        "status": "operational", 
        "version": "1.0.0",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "documentation": "/docs",
        "health_check": "/health"
    }

@app.get("/health",
         summary="Health check detalhado", 
         description="Verifica√ß√£o detalhada de sa√∫de da aplica√ß√£o",
         tags=["Sistema"])
async def health_check():
    """
    **Health check detalhado da aplica√ß√£o**
    
    Endpoint para monitoramento que verifica o status de todos os 
    componentes cr√≠ticos da aplica√ß√£o.
    """
    try:
        # Verificar acesso aos arquivos de dados
        files_status = {
            "users_csv": os.path.exists(USERS_CSV),
            "metrics_csv": os.path.exists(METRICS_CSV)
        }
        
        # Status geral
        overall_status = "healthy" if all(files_status.values()) else "degraded"
        
        return {
            "status": overall_status,
            "version": "1.0.0",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "components": {
                "database": files_status,
                "jwt_auth": "operational",
                "api": "operational"
            },
            "uptime": "API funcionando normalmente"
        }
        
    except Exception as e:
        logger.error(f"Erro no health check: {e}")
        return {
            "status": "error",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "error": "Falha na verifica√ß√£o de sa√∫de"
        }

@app.get("/protected",
         summary="Endpoint protegido de teste",
         description="Endpoint para testar autentica√ß√£o JWT",
         tags=["Sistema"])
async def protected_route(current_user: Dict[str, Any] = Depends(get_current_user)):
    """
    **Endpoint protegido para teste de autentica√ß√£o**
    
    Use este endpoint para verificar se seu token JWT est√° funcionando
    corretamente. Retorna informa√ß√µes do usu√°rio autenticado.
    
    **Requer:** Token JWT v√°lido no header Authorization
    """
    return {
        "message": f"üéâ Acesso autorizado para {current_user['email']}",
        "user_data": {
            "email": current_user['email'],
            "role": current_user['role'],
            "access_level": "Administrador" if current_user['role'] == "admin" else "Usu√°rio comum"
        },
        "token_info": {
            "expires_at": datetime.fromtimestamp(current_user.get('exp', 0), timezone.utc).isoformat(),
            "issued_at": datetime.fromtimestamp(current_user.get('iat', 0), timezone.utc).isoformat()
        },
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@app.get("/metrics",
         summary="Consultar m√©tricas de marketing",
         description="Endpoint principal para consulta de dados de m√©tricas com filtros e pagina√ß√£o",
         tags=["M√©tricas"])
async def get_metrics(
    page: int = Query(1, ge=1, description="N√∫mero da p√°gina (inicia em 1)"),
    limit: int = Query(DEFAULT_PAGE_SIZE, ge=1, le=MAX_PAGE_SIZE, description=f"Registros por p√°gina (m√°x: {MAX_PAGE_SIZE})"),
    start_date: Optional[str] = Query(None, description="Data inicial no formato YYYY-MM-DD", example="2024-01-01"),
    end_date: Optional[str] = Query(None, description="Data final no formato YYYY-MM-DD", example="2024-12-31"),  
    order_by: Optional[str] = Query(None, description="Campo para ordena√ß√£o (date, clicks, impressions, etc)", example="date"),
    order_desc: bool = Query(False, description="Ordena√ß√£o decrescente (padr√£o: crescente)"),
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    **Consultar m√©tricas de marketing digital com controle de acesso**
    
    Este √© o endpoint principal para consulta de m√©tricas com sistema robusto 
    de filtros, pagina√ß√£o e controle de permiss√µes baseado em roles.
    
    **üéØ Controle de Acesso por Role:**
    - **Admin:** Acesso completo incluindo dados financeiros (`cost_micros`)
    - **User:** Acesso limitado, campos sens√≠veis s√£o ocultados
    
    **üìä Funcionalidades:**
    - **Pagina√ß√£o:** Navegue por grandes volumes de dados
    - **Filtros temporais:** Filtre por per√≠odo espec√≠fico  
    - **Ordena√ß√£o:** Ordene por qualquer campo dispon√≠vel
    - **Performance:** Otimizado para resposta r√°pida
    
    **üìã Campos dispon√≠veis (varia por role):**
    - `date`: Data da m√©trica
    - `account_id`: ID da conta publicit√°ria
    - `campaign_id`: ID da campanha (se dispon√≠vel)
    - `clicks`: N√∫mero de cliques
    - `impressions`: N√∫mero de impress√µes  
    - `conversions`: N√∫mero de convers√µes
    - `interactions`: N√∫mero de intera√ß√µes
    - `cost_micros`: Custo em micros (**apenas admin**)
    
    **üí° Exemplos de uso:**
    - Listar primeiras 50 m√©tricas: `GET /metrics`
    - Segunda p√°gina: `GET /metrics?page=2`  
    - Filtrar per√≠odo: `GET /metrics?start_date=2024-01-01&end_date=2024-01-31`
    - Ordenar por cliques: `GET /metrics?order_by=clicks&order_desc=true`
    - Consulta complexa: `GET /metrics?page=1&limit=25&start_date=2024-01-01&order_by=cost_micros&order_desc=true`
    
    **üîí Seguran√ßa:**
    - Requer token JWT v√°lido
    - Controle de acesso baseado em role
    - Valida√ß√£o de par√¢metros de entrada
    - Rate limiting impl√≠cito via pagina√ß√£o
    """
    try:
        # Calcular offset para pagina√ß√£o (baseada em p√°gina, n√£o offset direto)
        offset = (page - 1) * limit
        
        # Carregar dados das m√©tricas
        if not os.path.exists(METRICS_CSV):
            logger.error(f"Arquivo de m√©tricas n√£o encontrado: {METRICS_CSV}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Arquivo de dados de m√©tricas n√£o encontrado"
            )
        
        try:
            df = pd.read_csv(METRICS_CSV)
            logger.info(f"Carregadas {len(df)} m√©tricas do arquivo CSV")
        except pd.errors.EmptyDataError:
            logger.warning("Arquivo de m√©tricas est√° vazio")
            return {
                "data": [],
                "pagination": {
                    "page": page,
                    "limit": limit,  
                    "total_records": 0,
                    "total_pages": 0,
                    "has_next": False,
                    "has_previous": False
                },
                "filters_applied": {
                    "start_date": start_date,
                    "end_date": end_date,
                    "order_by": order_by,
                    "order_desc": order_desc
                },
                "user_access": {
                    "role": current_user.get('role'),
                    "restricted_fields": []
                }
            }
        except pd.errors.ParserError as e:
            logger.error(f"Erro ao fazer parse do CSV de m√©tricas: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Formato do arquivo de m√©tricas inv√°lido"
            )
        
        # === APLICAR FILTROS ===
        original_count = len(df)
        
        # Filtro por data de in√≠cio
        if start_date:
            try:
                df = df[df['date'] >= start_date]
                logger.debug(f"Filtro start_date aplicado: {len(df)} registros restantes")
            except (KeyError, TypeError) as e:
                logger.warning(f"Erro ao aplicar filtro start_date: {e}")
                raise HTTPException(
                    status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                    detail="Formato de data inicial inv√°lido ou campo 'date' n√£o encontrado"
                )
        
        # Filtro por data de fim  
        if end_date:
            try:
                df = df[df['date'] <= end_date]
                logger.debug(f"Filtro end_date aplicado: {len(df)} registros restantes")
            except (KeyError, TypeError) as e:
                logger.warning(f"Erro ao aplicar filtro end_date: {e}")
                raise HTTPException(
                    status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                    detail="Formato de data final inv√°lido ou campo 'date' n√£o encontrado"
                )
        
        # === APLICAR ORDENA√á√ÉO ===
        if order_by:
            if order_by in df.columns:
                try:
                    df = df.sort_values(by=order_by, ascending=not order_desc)
                    logger.debug(f"Ordena√ß√£o aplicada por {order_by} ({'desc' if order_desc else 'asc'})")
                except Exception as e:
                    logger.warning(f"Erro ao ordenar por {order_by}: {e}")
                    # Continuar sem ordena√ß√£o em caso de erro
            else:
                logger.warning(f"Campo de ordena√ß√£o inv√°lido: {order_by}. Campos dispon√≠veis: {list(df.columns)}")
                raise HTTPException(
                    status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                    detail=f"Campo de ordena√ß√£o '{order_by}' n√£o existe. Campos dispon√≠veis: {list(df.columns)}"
                )
        
        # === CONTROLE DE ACESSO ===
        restricted_fields = []
        if current_user.get("role") != "admin":
            # Remover campos sens√≠veis para usu√°rios n√£o-admin
            sensitive_fields = ["cost_micros"]
            fields_to_remove = [field for field in sensitive_fields if field in df.columns]
            
            if fields_to_remove:
                df = df.drop(columns=fields_to_remove)
                restricted_fields = fields_to_remove
                logger.info(f"Campos sens√≠veis removidos para usu√°rio '{current_user.get('email')}': {fields_to_remove}")
        
        # === CALCULAR PAGINA√á√ÉO ===
        total_filtered = len(df)
        total_pages = (total_filtered + limit - 1) // limit  # Ceiling division
        
        # Validar p√°gina solicitada
        if page > total_pages and total_pages > 0:
            raise HTTPException(
                status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                detail=f"P√°gina {page} n√£o existe. Total de p√°ginas: {total_pages}"
            )
        
        # === APLICAR PAGINA√á√ÉO ===
        paginated_df = df.iloc[offset:offset + limit]
        
        # === PREPARAR RESPOSTA ===
        data = paginated_df.to_dict(orient="records")
        
        # Log da opera√ß√£o
        logger.info(f"M√©tricas retornadas: {len(data)} registros (p√°gina {page}/{total_pages}) "
                   f"para usu√°rio {current_user.get('email')} (role: {current_user.get('role')})")
        
        return {
            "data": data,
            "pagination": {
                "page": page,
                "limit": limit,
                "total_records": total_filtered,
                "total_pages": total_pages,
                "has_next": page < total_pages,
                "has_previous": page > 1,
                "showing": f"{offset + 1}-{min(offset + limit, total_filtered)} de {total_filtered}"
            },
            "filters_applied": {
                "start_date": start_date,
                "end_date": end_date, 
                "order_by": order_by,
                "order_desc": order_desc,
                "records_filtered": f"{total_filtered} de {original_count} registros"
            },
            "user_access": {
                "role": current_user.get('role'),
                "email": current_user.get('email'),
                "restricted_fields": restricted_fields,
                "access_level": "full" if not restricted_fields else "limited"
            }
        }
        
    except HTTPException:
        # Re-raise HTTPExceptions (j√° tratadas)
        raise
    except Exception as e:
        logger.error(f"Erro inesperado ao buscar m√©tricas: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erro interno ao processar consulta de m√©tricas"
        )

# === STARTUP EVENT ===
@app.on_event("startup")
async def startup_event():
    """Evento executado na inicializa√ß√£o da aplica√ß√£o."""
    logger.info("=== Sistema de M√©tricas de Marketing Digital ===")
    logger.info("API iniciada com sucesso!")
    logger.info(f"Vers√£o: 1.0.0")
    logger.info(f"Ambiente: {'Desenvolvimento' if SECRET_KEY == 'k2v8Qw1n9Zp3s7Xy5Tg6Jr4Lm8Vb2Nc1Qw3Er5Ty7Ui9Op0As' else 'Produ√ß√£o'}")
    logger.info(f"Documenta√ß√£o dispon√≠vel em: /docs")
    
    # Verificar arquivos cr√≠ticos
    if not os.path.exists(USERS_CSV):
        logger.warning(f"‚ö†Ô∏è  Arquivo de usu√°rios n√£o encontrado: {USERS_CSV}")
    else:
        logger.info(f"‚úÖ Arquivo de usu√°rios OK: {USERS_CSV}")
        
    if not os.path.exists(METRICS_CSV):
        logger.warning(f"‚ö†Ô∏è  Arquivo de m√©tricas n√£o encontrado: {METRICS_CSV}")
    else:
        logger.info(f"‚úÖ Arquivo de m√©tricas OK: {METRICS_CSV}")

# === EXCEPTION HANDLERS ===
@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """Handler para rotas n√£o encontradas."""
    return {
        "error": "Endpoint n√£o encontrado",
        "message": f"A rota '{request.url.path}' n√£o existe",
        "available_endpoints": [
            "GET /",
            "GET /health", 
            "POST /login",
            "GET /protected",
            "GET /metrics",
            "GET /docs"
        ],
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    """Handler para erros internos do servidor."""
    logger.error(f"Erro interno no endpoint {request.url.path}: {exc}")
    return {
        "error": "Erro interno do servidor",
        "message": "Ocorreu um erro inesperado. Tente novamente em alguns instantes",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "support": "Entre em contato com o suporte se o problema persistir"
    }

if __name__ == "__main__":
    import uvicorn
    
    # Configura√ß√£o para desenvolvimento
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info",
        access_log=True
    )